|TopLevel
CLOCK_50 => ~NO_FANOUT~
KEY[0] => Ram8:u0.clock
KEY[1] => ~NO_FANOUT~
KEY[2] => ~NO_FANOUT~
KEY[3] => ~NO_FANOUT~
SW[0] => Ram8:u0.input[0]
SW[1] => Ram8:u0.input[1]
SW[2] => Ram8:u0.input[2]
SW[3] => Ram8:u0.input[3]
SW[4] => Ram8:u0.address[0]
SW[5] => Ram8:u0.address[1]
SW[6] => Ram8:u0.address[2]
SW[7] => Ram8:u0.load
SW[8] => ~NO_FANOUT~
SW[9] => ~NO_FANOUT~
LEDR[0] << Ram8:u0.output[0]
LEDR[1] << Ram8:u0.output[1]
LEDR[2] << Ram8:u0.output[2]
LEDR[3] << Ram8:u0.output[3]
LEDR[4] << <GND>
LEDR[5] << <GND>
LEDR[6] << <GND>
LEDR[7] << <GND>
LEDR[8] << <GND>
LEDR[9] << <GND>


|TopLevel|Ram8:u0
clock => Register16:reg1.clock
clock => Register16:reg2.clock
clock => Register16:reg3.clock
clock => Register16:reg4.clock
clock => Register16:reg5.clock
clock => Register16:reg6.clock
clock => Register16:reg7.clock
clock => Register16:reg8.clock
input[0] => Register16:reg1.input[0]
input[0] => Register16:reg2.input[0]
input[0] => Register16:reg3.input[0]
input[0] => Register16:reg4.input[0]
input[0] => Register16:reg5.input[0]
input[0] => Register16:reg6.input[0]
input[0] => Register16:reg7.input[0]
input[0] => Register16:reg8.input[0]
input[1] => Register16:reg1.input[1]
input[1] => Register16:reg2.input[1]
input[1] => Register16:reg3.input[1]
input[1] => Register16:reg4.input[1]
input[1] => Register16:reg5.input[1]
input[1] => Register16:reg6.input[1]
input[1] => Register16:reg7.input[1]
input[1] => Register16:reg8.input[1]
input[2] => Register16:reg1.input[2]
input[2] => Register16:reg2.input[2]
input[2] => Register16:reg3.input[2]
input[2] => Register16:reg4.input[2]
input[2] => Register16:reg5.input[2]
input[2] => Register16:reg6.input[2]
input[2] => Register16:reg7.input[2]
input[2] => Register16:reg8.input[2]
input[3] => Register16:reg1.input[3]
input[3] => Register16:reg2.input[3]
input[3] => Register16:reg3.input[3]
input[3] => Register16:reg4.input[3]
input[3] => Register16:reg5.input[3]
input[3] => Register16:reg6.input[3]
input[3] => Register16:reg7.input[3]
input[3] => Register16:reg8.input[3]
input[4] => Register16:reg1.input[4]
input[4] => Register16:reg2.input[4]
input[4] => Register16:reg3.input[4]
input[4] => Register16:reg4.input[4]
input[4] => Register16:reg5.input[4]
input[4] => Register16:reg6.input[4]
input[4] => Register16:reg7.input[4]
input[4] => Register16:reg8.input[4]
input[5] => Register16:reg1.input[5]
input[5] => Register16:reg2.input[5]
input[5] => Register16:reg3.input[5]
input[5] => Register16:reg4.input[5]
input[5] => Register16:reg5.input[5]
input[5] => Register16:reg6.input[5]
input[5] => Register16:reg7.input[5]
input[5] => Register16:reg8.input[5]
input[6] => Register16:reg1.input[6]
input[6] => Register16:reg2.input[6]
input[6] => Register16:reg3.input[6]
input[6] => Register16:reg4.input[6]
input[6] => Register16:reg5.input[6]
input[6] => Register16:reg6.input[6]
input[6] => Register16:reg7.input[6]
input[6] => Register16:reg8.input[6]
input[7] => Register16:reg1.input[7]
input[7] => Register16:reg2.input[7]
input[7] => Register16:reg3.input[7]
input[7] => Register16:reg4.input[7]
input[7] => Register16:reg5.input[7]
input[7] => Register16:reg6.input[7]
input[7] => Register16:reg7.input[7]
input[7] => Register16:reg8.input[7]
input[8] => Register16:reg1.input[8]
input[8] => Register16:reg2.input[8]
input[8] => Register16:reg3.input[8]
input[8] => Register16:reg4.input[8]
input[8] => Register16:reg5.input[8]
input[8] => Register16:reg6.input[8]
input[8] => Register16:reg7.input[8]
input[8] => Register16:reg8.input[8]
input[9] => Register16:reg1.input[9]
input[9] => Register16:reg2.input[9]
input[9] => Register16:reg3.input[9]
input[9] => Register16:reg4.input[9]
input[9] => Register16:reg5.input[9]
input[9] => Register16:reg6.input[9]
input[9] => Register16:reg7.input[9]
input[9] => Register16:reg8.input[9]
input[10] => Register16:reg1.input[10]
input[10] => Register16:reg2.input[10]
input[10] => Register16:reg3.input[10]
input[10] => Register16:reg4.input[10]
input[10] => Register16:reg5.input[10]
input[10] => Register16:reg6.input[10]
input[10] => Register16:reg7.input[10]
input[10] => Register16:reg8.input[10]
input[11] => Register16:reg1.input[11]
input[11] => Register16:reg2.input[11]
input[11] => Register16:reg3.input[11]
input[11] => Register16:reg4.input[11]
input[11] => Register16:reg5.input[11]
input[11] => Register16:reg6.input[11]
input[11] => Register16:reg7.input[11]
input[11] => Register16:reg8.input[11]
input[12] => Register16:reg1.input[12]
input[12] => Register16:reg2.input[12]
input[12] => Register16:reg3.input[12]
input[12] => Register16:reg4.input[12]
input[12] => Register16:reg5.input[12]
input[12] => Register16:reg6.input[12]
input[12] => Register16:reg7.input[12]
input[12] => Register16:reg8.input[12]
input[13] => Register16:reg1.input[13]
input[13] => Register16:reg2.input[13]
input[13] => Register16:reg3.input[13]
input[13] => Register16:reg4.input[13]
input[13] => Register16:reg5.input[13]
input[13] => Register16:reg6.input[13]
input[13] => Register16:reg7.input[13]
input[13] => Register16:reg8.input[13]
input[14] => Register16:reg1.input[14]
input[14] => Register16:reg2.input[14]
input[14] => Register16:reg3.input[14]
input[14] => Register16:reg4.input[14]
input[14] => Register16:reg5.input[14]
input[14] => Register16:reg6.input[14]
input[14] => Register16:reg7.input[14]
input[14] => Register16:reg8.input[14]
input[15] => Register16:reg1.input[15]
input[15] => Register16:reg2.input[15]
input[15] => Register16:reg3.input[15]
input[15] => Register16:reg4.input[15]
input[15] => Register16:reg5.input[15]
input[15] => Register16:reg6.input[15]
input[15] => Register16:reg7.input[15]
input[15] => Register16:reg8.input[15]
load => DMux8Way:dmuxsel.a
address[0] => DMux8Way:dmuxsel.sel[0]
address[0] => Mux8Way16:mux.sel[0]
address[1] => DMux8Way:dmuxsel.sel[1]
address[1] => Mux8Way16:mux.sel[1]
address[2] => DMux8Way:dmuxsel.sel[2]
address[2] => Mux8Way16:mux.sel[2]
output[0] <= Mux8Way16:mux.q[0]
output[1] <= Mux8Way16:mux.q[1]
output[2] <= Mux8Way16:mux.q[2]
output[3] <= Mux8Way16:mux.q[3]
output[4] <= Mux8Way16:mux.q[4]
output[5] <= Mux8Way16:mux.q[5]
output[6] <= Mux8Way16:mux.q[6]
output[7] <= Mux8Way16:mux.q[7]
output[8] <= Mux8Way16:mux.q[8]
output[9] <= Mux8Way16:mux.q[9]
output[10] <= Mux8Way16:mux.q[10]
output[11] <= Mux8Way16:mux.q[11]
output[12] <= Mux8Way16:mux.q[12]
output[13] <= Mux8Way16:mux.q[13]
output[14] <= Mux8Way16:mux.q[14]
output[15] <= Mux8Way16:mux.q[15]


|TopLevel|Ram8:u0|DMux8Way:dmuxsel
a => q0.DATAB
a => q1.DATAB
a => q2.DATAB
a => q3.DATAB
a => q4.DATAB
a => q5.DATAB
a => q6.DATAB
a => q7.DATAB
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[0] => Equal7.IN2
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[1] => Equal7.IN1
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
sel[2] => Equal7.IN0
q0 <= q0.DB_MAX_OUTPUT_PORT_TYPE
q1 <= q1.DB_MAX_OUTPUT_PORT_TYPE
q2 <= q2.DB_MAX_OUTPUT_PORT_TYPE
q3 <= q3.DB_MAX_OUTPUT_PORT_TYPE
q4 <= q4.DB_MAX_OUTPUT_PORT_TYPE
q5 <= q5.DB_MAX_OUTPUT_PORT_TYPE
q6 <= q6.DB_MAX_OUTPUT_PORT_TYPE
q7 <= q7.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg1|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg2|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg3|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg4|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg5|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg6|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg7|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8
clock => Register8:RG1.clock
clock => Register8:RG2.clock
input[0] => Register8:RG2.input[0]
input[1] => Register8:RG2.input[1]
input[2] => Register8:RG2.input[2]
input[3] => Register8:RG2.input[3]
input[4] => Register8:RG2.input[4]
input[5] => Register8:RG2.input[5]
input[6] => Register8:RG2.input[6]
input[7] => Register8:RG2.input[7]
input[8] => Register8:RG1.input[0]
input[9] => Register8:RG1.input[1]
input[10] => Register8:RG1.input[2]
input[11] => Register8:RG1.input[3]
input[12] => Register8:RG1.input[4]
input[13] => Register8:RG1.input[5]
input[14] => Register8:RG1.input[6]
input[15] => Register8:RG1.input[7]
load => Register8:RG1.load
load => Register8:RG2.load
output[0] <= Register8:RG2.output[0]
output[1] <= Register8:RG2.output[1]
output[2] <= Register8:RG2.output[2]
output[3] <= Register8:RG2.output[3]
output[4] <= Register8:RG2.output[4]
output[5] <= Register8:RG2.output[5]
output[6] <= Register8:RG2.output[6]
output[7] <= Register8:RG2.output[7]
output[8] <= Register8:RG1.output[0]
output[9] <= Register8:RG1.output[1]
output[10] <= Register8:RG1.output[2]
output[11] <= Register8:RG1.output[3]
output[12] <= Register8:RG1.output[4]
output[13] <= Register8:RG1.output[5]
output[14] <= Register8:RG1.output[6]
output[15] <= Register8:RG1.output[7]


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG1|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2
clock => BinaryDigit:c1.clock
clock => BinaryDigit:c2.clock
clock => BinaryDigit:c3.clock
clock => BinaryDigit:c4.clock
clock => BinaryDigit:c5.clock
clock => BinaryDigit:c6.clock
clock => BinaryDigit:c7.clock
clock => BinaryDigit:c8.clock
input[0] => BinaryDigit:c1.input
input[1] => BinaryDigit:c2.input
input[2] => BinaryDigit:c3.input
input[3] => BinaryDigit:c4.input
input[4] => BinaryDigit:c5.input
input[5] => BinaryDigit:c6.input
input[6] => BinaryDigit:c7.input
input[7] => BinaryDigit:c8.input
load => BinaryDigit:c1.load
load => BinaryDigit:c2.load
load => BinaryDigit:c3.load
load => BinaryDigit:c4.load
load => BinaryDigit:c5.load
load => BinaryDigit:c6.load
load => BinaryDigit:c7.load
load => BinaryDigit:c8.load
output[0] <= BinaryDigit:c1.output
output[1] <= BinaryDigit:c2.output
output[2] <= BinaryDigit:c3.output
output[3] <= BinaryDigit:c4.output
output[4] <= BinaryDigit:c5.output
output[5] <= BinaryDigit:c6.output
output[6] <= BinaryDigit:c7.output
output[7] <= BinaryDigit:c8.output


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c1
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c1|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c1|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c2
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c2|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c2|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c3
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c3|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c3|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c4
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c4|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c4|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c5
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c5|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c5|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c6
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c6|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c6|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c7
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c7|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c7|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c8
clock => FlipFlopD:flipflop1.clock
input => Mux2Way:mux.b
load => Mux2Way:mux.sel
output <= FlipFlopD:flipflop1.q


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c8|Mux2Way:mux
a => q.DATAB
b => q.DATAA
sel => q.OUTPUTSELECT
q <= q.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Register16:reg8|Register8:RG2|BinaryDigit:c8|FlipFlopD:flipflop1
clock => q~reg0.CLK
d => q~reg0.DATAIN
clear => q~reg0.ACLR
clear => q.IN0
preset => q.IN1
q <= q~reg0.DB_MAX_OUTPUT_PORT_TYPE


|TopLevel|Ram8:u0|Mux8Way16:mux
a[0] => q.DATAB
a[1] => q.DATAB
a[2] => q.DATAB
a[3] => q.DATAB
a[4] => q.DATAB
a[5] => q.DATAB
a[6] => q.DATAB
a[7] => q.DATAB
a[8] => q.DATAB
a[9] => q.DATAB
a[10] => q.DATAB
a[11] => q.DATAB
a[12] => q.DATAB
a[13] => q.DATAB
a[14] => q.DATAB
a[15] => q.DATAB
b[0] => q.DATAB
b[1] => q.DATAB
b[2] => q.DATAB
b[3] => q.DATAB
b[4] => q.DATAB
b[5] => q.DATAB
b[6] => q.DATAB
b[7] => q.DATAB
b[8] => q.DATAB
b[9] => q.DATAB
b[10] => q.DATAB
b[11] => q.DATAB
b[12] => q.DATAB
b[13] => q.DATAB
b[14] => q.DATAB
b[15] => q.DATAB
c[0] => q.DATAB
c[1] => q.DATAB
c[2] => q.DATAB
c[3] => q.DATAB
c[4] => q.DATAB
c[5] => q.DATAB
c[6] => q.DATAB
c[7] => q.DATAB
c[8] => q.DATAB
c[9] => q.DATAB
c[10] => q.DATAB
c[11] => q.DATAB
c[12] => q.DATAB
c[13] => q.DATAB
c[14] => q.DATAB
c[15] => q.DATAB
d[0] => q.DATAB
d[1] => q.DATAB
d[2] => q.DATAB
d[3] => q.DATAB
d[4] => q.DATAB
d[5] => q.DATAB
d[6] => q.DATAB
d[7] => q.DATAB
d[8] => q.DATAB
d[9] => q.DATAB
d[10] => q.DATAB
d[11] => q.DATAB
d[12] => q.DATAB
d[13] => q.DATAB
d[14] => q.DATAB
d[15] => q.DATAB
e[0] => q.DATAB
e[1] => q.DATAB
e[2] => q.DATAB
e[3] => q.DATAB
e[4] => q.DATAB
e[5] => q.DATAB
e[6] => q.DATAB
e[7] => q.DATAB
e[8] => q.DATAB
e[9] => q.DATAB
e[10] => q.DATAB
e[11] => q.DATAB
e[12] => q.DATAB
e[13] => q.DATAB
e[14] => q.DATAB
e[15] => q.DATAB
f[0] => q.DATAB
f[1] => q.DATAB
f[2] => q.DATAB
f[3] => q.DATAB
f[4] => q.DATAB
f[5] => q.DATAB
f[6] => q.DATAB
f[7] => q.DATAB
f[8] => q.DATAB
f[9] => q.DATAB
f[10] => q.DATAB
f[11] => q.DATAB
f[12] => q.DATAB
f[13] => q.DATAB
f[14] => q.DATAB
f[15] => q.DATAB
g[0] => q.DATAB
g[1] => q.DATAB
g[2] => q.DATAB
g[3] => q.DATAB
g[4] => q.DATAB
g[5] => q.DATAB
g[6] => q.DATAB
g[7] => q.DATAB
g[8] => q.DATAB
g[9] => q.DATAB
g[10] => q.DATAB
g[11] => q.DATAB
g[12] => q.DATAB
g[13] => q.DATAB
g[14] => q.DATAB
g[15] => q.DATAB
h[0] => q.DATAA
h[1] => q.DATAA
h[2] => q.DATAA
h[3] => q.DATAA
h[4] => q.DATAA
h[5] => q.DATAA
h[6] => q.DATAA
h[7] => q.DATAA
h[8] => q.DATAA
h[9] => q.DATAA
h[10] => q.DATAA
h[11] => q.DATAA
h[12] => q.DATAA
h[13] => q.DATAA
h[14] => q.DATAA
h[15] => q.DATAA
sel[0] => Equal0.IN2
sel[0] => Equal1.IN2
sel[0] => Equal2.IN1
sel[0] => Equal3.IN2
sel[0] => Equal4.IN1
sel[0] => Equal5.IN2
sel[0] => Equal6.IN0
sel[1] => Equal0.IN1
sel[1] => Equal1.IN1
sel[1] => Equal2.IN2
sel[1] => Equal3.IN1
sel[1] => Equal4.IN0
sel[1] => Equal5.IN0
sel[1] => Equal6.IN2
sel[2] => Equal0.IN0
sel[2] => Equal1.IN0
sel[2] => Equal2.IN0
sel[2] => Equal3.IN0
sel[2] => Equal4.IN2
sel[2] => Equal5.IN1
sel[2] => Equal6.IN1
q[0] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[1] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[2] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[3] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[4] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[5] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[6] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[7] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[8] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[9] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[10] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[11] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[12] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[13] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[14] <= q.DB_MAX_OUTPUT_PORT_TYPE
q[15] <= q.DB_MAX_OUTPUT_PORT_TYPE


